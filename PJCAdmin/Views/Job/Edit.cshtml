@model PJCAdmin.Models.job

@{
    ViewBag.Title = "Edit";
    int taskListCount = 0;
}

<h2>Edit Job</h2>
<br />
<br />

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "taskForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>job</legend>

        @Html.HiddenFor(model => model.jobID)

        <div class="editor-label">
            <h3>Job Title</h3>
        </div>
        <div style="margin-left:50px;">
            <div class="editor-field">
                @Html.EditorFor(model => model.jobTitle)
                @Html.ValidationMessageFor(model => model.jobTitle)
            </div>
        </div>
        <h3>Assigned Tasks:</h3>
        <div style="margin-left:50px;">
            <table>

                @foreach (var item in Model.tasks)
                {

                    <tr>
                        <td>
                            @item.taskName
                        </td>

                        @*<td>
                                @Html.ActionLink("Edit", "Edit", "Edit") |
                                @Html.ActionLink("Details", "Details", "Edit") |
                                @Html.ActionLink("Delete", "Delete", "Edit")
                            </td>*@
                        <td>
                            <button class="taskRemove" data-taskid="@item.taskID" data-selected="false">Remove</button>
                            @Html.CheckBox("taskListRemove[" + taskListCount + "]", false, new Dictionary<string, object> { { "value", @item.taskID }, { "style", "display:none;" } })
                            @{taskListCount++;}
                        </td>

                    </tr>
                }
            </table>
        </div>
        <br />
        <fieldset>
            <h3>Available Tasks:</h3>
            <div style="margin-left:50px;">
                <table>

                    @for (int i = 0; i < ((List<PJCAdmin.Models.task>)ViewData["Tasks"]).Except(Model.tasks).Count(); i++)
                    {

                        <tr>
                            <td>
                                @Html.Label(((List<PJCAdmin.Models.task>)ViewData["Tasks"]).Except(Model.tasks).ElementAt(i).taskName)&nbsp; &nbsp;
                            </td>
                            <td>
                                <button class="task" data-taskid="@((List<PJCAdmin.Models.task>)ViewData["Tasks"]).Except(Model.tasks).ElementAt(i).taskID" data-selected="false">Add</button>
                                @Html.CheckBox("taskList[" + i + "]", false, new Dictionary<string, object> { { "value", ((List<PJCAdmin.Models.task>)ViewData["Tasks"]).Except(Model.tasks).ElementAt(i).taskID }, { "style", "display:none;" } })
                            </td>
                        </tr>
                    }


                </table>
            </div>
        </fieldset>
        <br />
        <p>
            <input type="submit" value="Save" /> | &nbsp;
            @Html.ActionLink("Back to List", "Index")
        </p>
    </fieldset>
}


<script>
    $(function () {
        $('button.task').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($(this).data("selected") == "true") {
                $(this).data("selected", "false");
                $(this).html("Add");
                $('input[type="checkbox"]', $(this).parent()).attr("checked", false);
            } else {
                $(this).data("selected", "true");
                $(this).html("Remove");
                $('input[type="checkbox"]', $(this).parent()).attr("checked", true);
            }
            //document.getElementById("taskForm").reload();
            var thisForm = $(e.currentTarget);
            $.ajax({
                // simulate form submission
                type: thisForm.attr('method') || 'POST',
                url: thisForm.attr('action') || window.location.href,
                data: $.serialize(thisForm.data()),
                success: function () {
                    always();
                }
            })
            .always(function () {
                // when it is done submitting data to the server, redirect
                window.location.reload();
            });
        })

        $('button.taskRemove').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($(this).data("selected") == "true") {
                $(this).data("selected", "false");
                $(this).html("Remove");
                $('input[type="checkbox"]', $(this).parent()).attr("checked", false);
            } else {
                $(this).data("selected", "true");
                $(this).html("Add");
                $('input[type="checkbox"]', $(this).parent()).attr("checked", true);
            }
            //document.getElementById("taskForm").reload();
            var thisForm = $(e.currentTarget);
            $.ajax({
                // simulate form submission
                type: thisForm.attr('method') || 'POST',
                url: thisForm.attr('action') || window.location.href,
                data: $.serialize(thisForm.data()),
                success: function () {
                    always();
                }
            })
            .always(function () {
                // when it is done submitting data to the server, redirect
                window.location.reload();
            });
        })
    })
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
