@model MembershipUser
@{
    ViewBag.Title = "Edit";

    ProfileCommon userProfile = (ProfileCommon)ProfileCommon.Create(Model.UserName, true);
}

<h2>Edit User</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()

    <fieldset>
        <ol>
            <li>
                @Html.LabelFor(m => m.UserName)
                @Html.DisplayFor(m => m.UserName)
                @Html.HiddenFor(m => m.UserName)
            </li>
            <li>
                @Html.LabelFor(m => m.Email)
                @if (Roles.IsUserInRole("Administrator"))
                {
                    @Html.TextBoxFor(m => m.Email)
                }
                else
                {
                    @Model.Email
                    @Html.HiddenFor(m => m.Email)
                }
            </li>
            <li>
                <label>Phone Number</label>
                <input type="text" name="phonenumber" value="@userProfile.PhoneNumber" />
            </li>
            <li>
                <label>User Type</label>
                @if (Roles.IsUserInRole("Administrator"))
                {
                    <select name="userRole" class="form-control">
                        @foreach (string role in Roles.GetAllRoles())
                        {
                            if (Roles.IsUserInRole(Model.UserName, role))
                            {
                                <option value="@role" selected>@role</option>
                            }
                            else
                            {
                                <option value="@role">@role</option>
                            }
                        }
                    </select>
                }
                else
                {
                    @Roles.GetRolesForUser()[0]
                    <input type="hidden" name="userRole" value="@Roles.GetRolesForUser()[0]" />
                }
            </li>
            <!--
            <li>
                <label>Job</label>
                <select name="job" id="selectjob">
                    <option value="">None</option>
                    //atfor (int i = 0; i < ((List<PJCAdmin.Models.Routine>)ViewData["Jobs"]).Count; i++)
                    {

                        <option value="at//(((List<PJCAdmin.Models.Routine>)ViewData["Jobs"]).ElementAt(i).routineID)" at//if (((PJCAdmin.Models.Routine)ViewData["SelectedJob"]).routineID == ((List<PJCAdmin.Models.Routine>)ViewData["Jobs"]).ElementAt(i).routineID) { atHtml.Raw("selected")} >
                            //atHtml.Label(((List<PJCAdmin.Models.Routine>)ViewData["Jobs"]).ElementAt(i).routineTitle)
                        </option>
                    }
                </select>
                <label>Apply Template Tasks <input type="checkbox" name="applyJobTemplate" value="true" /></label>

            </li>-->
            @if (Roles.IsUserInRole(Model.UserName, "Job Coach"))
            {
                <li style="margin-top:20px;"><label>Assigned Users</label></li>
                <li>
                    <ul id="assignedUsersList">
                        @if (((List<MembershipUser>)ViewData["AssignedUsers"]).Count > 0)
                    {
                        for (int i = 0; i < ((List<MembershipUser>)ViewData["AssignedUsers"]).Count; i++)
                        {
                                <li>
                                    @(((List<MembershipUser>)ViewData["AssignedUsers"]).ElementAt(i).UserName)
                                    @if (Roles.IsUserInRole("Administrator"))
                                    {
                                        <span>&nbsp; &nbsp;</span><button class="remove-user" data-taskid="@(((List<MembershipUser>)ViewData["AssignedUsers"]).ElementAt(i).UserName)" data-selected="false"><i class="fa fa-trash"></i></button>
                                    }
                                    @Html.Hidden("assignedUsers[" + i + "]", ((List<MembershipUser>)ViewData["AssignedUsers"]).ElementAt(i).UserName)
                                </li>
                            }
                        }
                        else
                        {
                            <li id="nousers" style="color:#999"><i>No Assigned Users</i></li>
                        }
                    </ul>
                </li>

                if (Roles.IsUserInRole("Administrator"))
                {
                    <li style="margin-top:20px;">
                        <select name="selectAddUsers" id="selectAddUsers">
                            @for (int i = 0; i < ((List<MembershipUser>)ViewData["AvailableUsers"]).Count; i++)
                        {
                                <option value="@(((List<MembershipUser>)ViewData["AvailableUsers"]).ElementAt(i).UserName)">
                                    @Html.Label(((List<MembershipUser>)ViewData["AvailableUsers"]).ElementAt(i).UserName)
                                </option>
                            }
                        </select>
                        <button id="addUser">Assign User</button>
                    </li>
                }
            }

            @if (Roles.IsUserInRole(Model.UserName, "Parent"))
            {
                <li style="margin-top:20px;"><label>Children</label></li>
                <li>
                    <ul id="assignedChildrenList">
                        @if (((List<MembershipUser>)ViewData["Children"]).Count > 0)
                    {
                        for (int i = 0; i < ((List<MembershipUser>)ViewData["Children"]).Count; i++)
                        {
                                <li>
                                    @(((List<MembershipUser>)ViewData["Children"]).ElementAt(i).UserName)
                                    @if (Roles.IsUserInRole("Administrator"))
                                    {
                                        <span>&nbsp; &nbsp;</span><button class="remove-user" data-taskid="@(((List<MembershipUser>)ViewData["Children"]).ElementAt(i).UserName)" data-selected="false"><i class="fa fa-trash"></i></button>
                                    }
                                    @Html.Hidden("assignedChildren[" + i + "]", ((List<MembershipUser>)ViewData["Children"]).ElementAt(i).UserName)
                                </li>
                            }
                        }
                        else
                        {
                            <li id="nochildren" style="color:#999"><i>No Assigned Children</i></li>
                        }
                    </ul>
                </li>
                
                if (Roles.IsUserInRole("Administrator"))
                {
                    <li style="margin-top:20px;">
                        <select name="selectAddChildren" id="selectAddChildren">
                            @for (int i = 0; i < ((List<MembershipUser>)ViewData["AvailableChildren"]).Count; i++)
                            {
                                <option value="@(((List<MembershipUser>)ViewData["AvailableChildren"]).ElementAt(i).UserName)">
                                    @Html.Label(((List<MembershipUser>)ViewData["AvailableChildren"]).ElementAt(i).UserName)
                                </option>
                            }
                        </select>
                        <button id="addChild">Assign Child</button>
                    </li>
                }
            }

            @if (Roles.IsUserInRole(Model.UserName, "User"))
            {
                <li style="margin-top:20px;"><label>Parent</label></li>
                <li>
                    <ul id="assignedParentList">
                        @if (ViewData["Parent"] != null)
                        {
                                <li>
                                    @ViewData["Parent"]
                                    @if (Roles.IsUserInRole("Administrator"))
                                    {
                                        <span>&nbsp; &nbsp;</span><button class="remove-user" data-taskid="@ViewData["Parent"]" data-selected="false"><i class="fa fa-trash"></i></button>
                                    }
                                    @Html.Hidden("Parent", ViewData["Parent"])
                                </li>
                        }
  
                        else
                        {
                            <li id="noparent" style="color:#999"><i>No Assigned Parent</i></li>
                        }
                    </ul>
                </li>
                if (Roles.IsUserInRole("Administrator"))
                {
                    
                        <li style="margin-top:20px;">
                            <select name="selectAddParent" id="selectAddParent">
                                @for (int i = 0; i < ((List<MembershipUser>)ViewData["AvailableParents"]).Count; i++)
                                {
                                    <option value="@(((List<MembershipUser>)ViewData["AvailableParents"]).ElementAt(i).UserName)">
                                        @Html.Label(((List<MembershipUser>)ViewData["AvailableParents"]).ElementAt(i).UserName)
                                    </option>
                                }
                            </select>
                            <button id="addParent">Assign Parent</button>
                        </li>
                    
                }

                <li style="margin-top:20px;"><label>Job Coach</label></li>
                <li>
                    <ul id="assignedJobCoachList">
                        @if (ViewData["JobCoach"] != null)
                        {
                            <li>
                                @ViewData["JobCoach"]
                                @if (Roles.IsUserInRole("Administrator"))
                                {
                                    <span>&nbsp; &nbsp;</span><button class="remove-user" data-taskid="@ViewData["JobCoach"]" data-selected="false"><i class="fa fa-trash"></i></button>
                                }
                                @Html.Hidden("JobCoach", ViewData["JobCoach"])
                            </li>
                        }

                        else
                        {
                            <li id="nojobcoach" style="color:#999"><i>No Assigned Job Coach</i></li>
                        }
                    </ul>
                </li>
                
                if (Roles.IsUserInRole("Administrator"))
                {
                        <li style="margin-top:20px;">
                            <select name="selectAddJobCoach" id="selectAddJobCoach">
                                @for (int i = 0; i < ((List<MembershipUser>)ViewData["AvailableJobCoaches"]).Count; i++)
                                {
                                    <option value="@(((List<MembershipUser>)ViewData["AvailableJobCoaches"]).ElementAt(i).UserName)">
                                        @Html.Label(((List<MembershipUser>)ViewData["AvailableJobCoaches"]).ElementAt(i).UserName)
                                    </option>
                                }
                            </select>
                            <button id="addJobCoach">Assign Job Coach</button>
                        </li>
                    
                }
            }
        </ol>
        <input type="submit" value="Save" />
    </fieldset>
}

<script>
    $(function () {
        $('#addUser').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($('#nousers').size() > 0)
                $('#nousers').remove();
            var id = $('#selectAddUsers').val();
            var name = $('#selectAddUsers option:selected').html();
            $('#assignedUsersList').append('<li>' + name + '&nbsp; &nbsp;<button class="remove-user"><i class="fa fa-trash"></i></button><input type="hidden" name="assignedUsers[' + ($('#assignedUsersList').children().size()).toString() + ']"  value="' + id + '" /></li>')
        });
        $('#addChild').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($('#nochildren').size() > 0)
                $('#nochildren').remove();
            var id = $('#selectAddChildren').val();
            var name = $('#selectAddChildren option:selected').html();
            $('#assignedChildrenList').append('<li>' + name + '&nbsp; &nbsp;<button class="remove-user"><i class="fa fa-trash"></i></button><input type="hidden" name="assignedChildren[' + ($('#assignedChildrenList').size() - 1).toString() + ']"  value="' + id + '" /></li>')
        });
        $('#addParent').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($('#noparent').size() > 0)
                $('#noparent').remove();
            var id = $('#selectAddParent').val();
            var name = $('#selectAddParent option:selected').html();
            $('#assignedParentList').empty();
            $('#assignedParentList').append('<li>' + name + '&nbsp; &nbsp;<button class="remove-user"><i class="fa fa-trash"></i></button><input type="hidden" name="parent"  value="' + id + '" /></li>')
        });
        $('#addJobCoach').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if ($('#nojobcoach').size() > 0)
                $('#nojobcoach').remove();
            var id = $('#selectAddJobCoach').val();
            var name = $('#selectAddJobCoach option:selected').html();
            $('#assignedJobCoachList').empty();
            $('#assignedJobCoachList').append('<li>' + name + '&nbsp; &nbsp;<button class="remove-user"><i class="fa fa-trash"></i></button><input type="hidden" name="jobCoach"  value="' + id + '" /></li>')
        });


        $('#assignedUsersList').on('click', '.remove-user', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $(this).parent().remove();
            if ($('#assignedUsersList').children().size() == 0) {
                $('#assignedUsersList').append('<li id="nousers" style="color:#999"><i>No Assigned Users</i></li>');
            }
        });
        $('#assignedChildrenList').on('click', '.remove-user', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $(this).parent().remove();
            if ($('#assignedChildrenList').children().size() == 0) {
                $('#assignedChildrenList').append('<li id="nousers" style="color:#999"><i>No Assigned Children</i></li>');
            }
        });
        $('#assignedParentList').on('click', '.remove-user', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $(this).parent().remove();
            if ($('#assignedParentList').children().size() == 0) {
                $('#assignedParentList').append('<li id="nousers" style="color:#999"><i>No Assigned Parent</i></li>');
            }
        });
        $('#assignedJobCoachList').on('click', '.remove-user', function (e) {
            e.preventDefault();
            e.stopPropagation();
            $(this).parent().remove();
            if ($('#assignedJobCoachList').children().size() == 0) {
                $('#assignedJobCoachList').append('<li id="nousers" style="color:#999"><i>No Assigned Job Coach</i></li>');
            }
        });
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<p>
    <!--atHtml.ActionLink("Back to User Details", "Details", new { user = Model.UserName }) |-->
    @Html.ActionLink("Back to List", "List")
</p>
